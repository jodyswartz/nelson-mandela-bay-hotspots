{"version":3,"sources":["components/Loading.jsx","components/CovidMap.jsx","entities/LengendItem.js","entities/LegendItems.js","tasks/LoadWardsTask.js","components/Legend.jsx","components/Covid19.jsx","App.js","serviceWorker.js","index.js"],"names":["Loading","react_default","a","createElement","style","height","display","justifyContent","alignItems","className","role","CovidMap","_ref","wards","Map","zoom","center","GeoJSON","fillColor","weight","color","fillOpacity","data","onEachFeature","ward","layer","options","properties","name","confirmedText","bindTooltip","concat","slice","sticky","direction","on","mouseover","event","target","setStyle","mouseout","control_default","position","Paper","backgroundColor","fade","LegendItem","title","isFor","textColor","Object","classCallCheck","this","legendItems","cases","LoadWardTask","covidUrl","setState","load","_this","papa","parse","download","header","complete","result","classPrivateFieldLooseBase","_processCovidData","covidWards","_loop","i","features","covidWard","find","ISO_A3","ISO3","confirmed","Number","Confirmed","_formatNumberWithCommas","_setWardColor","length","legendItem","item","number","toString","replace","Legend","map","key","flex","fontWeight","fontSize","Covid19","_useState","useState","_useState2","slicedToArray","setWards","legendItemsReverse","toConsumableArray","reverse","useEffect","console","log","LoadWardsTask","components_Loading","src_components_CovidMap","components_Legend","App","_React$useState","React","_React$useState2","open","setOpen","Collapse","in","Alert","variant","severity","action","IconButton","aria-label","size","onClick","Close_default","components_Covid19","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.e514da76.chunk.js","sourcesContent":["import React from \"react\";\n\nconst Loading = () => {\n  return (\n    <div\n      style={{\n        height: \"100vh\",\n        display: \"flex\",\n        justifyContent: \"center\",\n        alignItems: \"center\",\n      }}\n    >\n      <div className=\"spinner-grow text-success\" role=\"status\">\n        <span className=\"sr-only\">Loading...</span>\n      </div>\n      <div className=\"spinner-grow text-danger\" role=\"status\">\n        <span className=\"sr-only\">Loading...</span>\n      </div>\n      <div className=\"spinner-grow text-info\" role=\"status\">\n        <span className=\"sr-only\">Loading...</span>\n      </div>\n    </div>\n  );\n};\n\nexport default Loading;\n","import React from \"react\";\nimport { Map, GeoJSON } from \"react-leaflet\";\nimport \"leaflet/dist/leaflet.css\";\nimport \"./CovidMap.css\";\nimport Control from 'react-leaflet-control';\nimport Paper from '@material-ui/core/Paper';\nimport { fade } from '@material-ui/core/styles/colorManipulator';\n\nconst CovidMap = ({ wards }) => {\n  const mapStyle = {\n    fillColor: \"white\",\n    weight: 1,\n    color: \"black\",\n    fillOpacity: 1,\n  };\n\n  const onEachWard = (ward, layer) => {\n    layer.options.fillColor = ward.properties.color;\n    const name = ward.properties.name;\n    const confirmedText = ward.properties.confirmedText;\n    layer.bindTooltip( `<div>\n      <h4 className=\"white-monospace line-height-1 normal-font-weight no-wrap our-tooltip-title-text\">\n      ${name.slice(18)}\n      </h4>\n      <h3 className=\"white-monospace line-height-1 no-margin normal-font-weight\">\n          <b>${confirmedText}</b> \n      </h3>\n  </div> `,{\n      sticky: true,\n      direction: \"auto\"});\n  \n      layer.on({\n        mouseover: (event) => {\n                      event.target.setStyle({\n                      color: \"#f8f8ff\"\n                        });\n                                },\n        mouseout: (event) => {\n          event.target.setStyle({\n          color: \"#000000\",\n                });\n                  },\n      });\n\n  };\n\n  return (\n    \n    <Map style={{ height: \"90vh\" }} zoom={10} center={[ -33.96,  25.62]}>\n\n      <GeoJSON\n        style={mapStyle}\n        data={wards}\n        onEachFeature={onEachWard}\n      />\n       <Control position=\"topright\">\n         <Paper style={{padding: '20px'},{backgroundColor: fade('#484848', 0.5)}}>\n           <h2><font color=\"#f8f8ff\">Covid-19 Active Cases <b>399</b> Updated: <b>27-05-2021</b></font></h2>\n         </Paper>\n   </Control>\n   <Control position=\"bottomright\">\n       <Paper style={{padding: '20px'},{backgroundColor: fade('#484848', 0.5)}}>\n       <font color=\"#f8f8ff\"><h5>As of 27 May 2021</h5></font>\n            <font color=\"#f8f8ff\">\n              <p><b>10</b><h6> Unknown Location</h6></p>\n              <p><b>70</b><h6> New Cases</h6></p>\n              <p><b>2963</b><h6> Passed Away</h6></p>\n              <p><b>53282</b><h6> Recovered</h6></p></font>\n         </Paper> \n          </Control>\n    </Map>\n  );\n};\n\nexport default CovidMap;\n","class LegendItem {\n  constructor(title, color, isFor, textColor) {\n    this.title = title;\n    this.color = color;\n    this.isFor = isFor;\n    this.textColor = textColor != null ? textColor : textColor;\n  }\n}\n\nexport default LegendItem;\n","import LegendItem from \"./LengendItem\";\n\nvar legendItems = [\n  new LegendItem(\n    \"21 +\",\n    \"#741f1f\",\n    (cases) => cases >= 21,\n    \"white\"\n  ),\n\n  new LegendItem(\n    \"16 - 20\",\n    \"#fd8d3c\",\n    (cases) => cases >= 16 && cases <= 20\n  ),\n\n  new LegendItem(\n    \"11 - 15\",\n    \"#feb24c\",\n    (cases) => cases >= 11 && cases <= 15\n  ),\n\n  new LegendItem(\n    \"6 - 10\",\n    \"#fed976\",\n    (cases) => cases >= 6 && cases <= 10\n  ),\n\n  new LegendItem(\n    \"1 - 5\",\n    \"#ffffcc\",\n    (cases) => cases >= 1 && cases <= 5\n  ),\n\n  new LegendItem(\"No Data\", \"#ffffff\", (cases) => true),\n];\n\nexport default legendItems;","import papa from \"papaparse\";\nimport legendItems from \"../entities/LegendItems\";\nimport { features } from \"../data/wards.json\";\n//    this.setState(features);\n\nclass LoadWardTask {\n  covidUrl = \"https://raw.githubusercontent.com/jodyswartz/Testdata/main/cases_country.csv\";\n  \n  setState = null;\n\n  load = (setState) => {\n    this.setState = setState;\n\n    papa.parse(this.covidUrl, {\n      download: true,\n      header: true,\n      complete: (result) => this.#processCovidData(result.data),\n    });\n  };\n\n  #processCovidData = (covidWards) => {\n    for (let i = 0; i < features.length; i++) {\n      const ward = features[i];\n      //console.log(ward);\n      const covidWard = covidWards.find(\n        (covidWard) => ward.properties.ISO_A3 === covidWard.ISO3\n      );\n\n      ward.properties.confirmed = 0;\n      ward.properties.confirmedText = 0;\n\n      if (covidWard != null) {\n        let confirmed = Number(covidWard.Confirmed);\n        ward.properties.confirmed = confirmed;\n        ward.properties.confirmedText = this.#formatNumberWithCommas(\n          confirmed\n        );\n      }\n      this.#setWardColor(ward);\n    }\n\n    this.setState(features);\n  };\n\n  #setWardColor = (ward) => {\n    const legendItem = legendItems.find((item) =>\n      item.isFor(ward.properties.confirmed)\n    );\n\n    if (legendItem != null) ward.properties.color = legendItem.color;\n  };\n\n  #formatNumberWithCommas = (number) => {\n    return number.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\");\n  };\n}\n\nexport default LoadWardTask;\n","import React from \"react\";\n\nconst Legend = ({ legendItems }) => {\n  return (\n    <div\n      style={{\n        display: \"flex\",\n        alignItems: \"stretch\",\n      }}\n    >\n      {legendItems.map((item) => (\n        <div\n          key={item.title}\n          style={{\n            backgroundColor: item.color,\n            flex: 1,\n            display: \"flex\",\n            alignItems: \"center\", // vertical\n            justifyContent: \"center\", // horiztontal\n            color: item.textColor != null ? item.textColor : \"black\",\n            fontWeight: \"bolder\",\n            fontSize: \"1em\",\n            height: \"10vh\",\n          }}\n        >\n          <span>{item.title}</span>\n        </div>\n      ))}\n    </div>\n  );\n};\n\nexport default Legend;\n","import React, { useState, useEffect } from \"react\";\n\nimport Loading from \"./Loading\";\nimport CovidMap from \"./CovidMap\";\nimport LoadWardsTask from \"../tasks/LoadWardsTask\";\nimport Legend from \"./Legend\";\nimport legendItems from \"../entities/LegendItems\";\n\nconst Covid19 = () => {\n  const [wards, setWards] = useState([]);\n\n  const legendItemsReverse = [...legendItems].reverse();\n\n  const load = () => {\n    console.log(\"load\");\n    const loadWardsTask = new LoadWardsTask();\n    loadWardsTask.load((wards) => setWards(wards));\n  };\n\n  useEffect(load, []);\n\n  return (\n    <div>\n      {wards.length === 0 ? (\n        <Loading />\n      ) : (\n        <div>\n          <CovidMap wards={wards} />\n          <Legend legendItems={legendItemsReverse} />\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default Covid19;\n","import React from \"react\";\nimport \"./App.css\";\nimport Covid19 from \"./components/Covid19\";\nimport Alert from '@material-ui/lab/Alert';\nimport IconButton from '@material-ui/core/IconButton';\nimport Collapse from '@material-ui/core/Collapse';\nimport CloseIcon from '@material-ui/icons/Close';\n\nfunction App() {\n  const [open, setOpen] = React.useState(true);\n  return (\n    <div>\n     <Collapse in={open}>\n        <Alert variant=\"filled\" severity=\"info\"\n          action={\n            <IconButton\n              aria-label=\"close\"\n              color=\"inherit\"\n              size=\"small\"\n              onClick={() => {\n                setOpen(false);\n              }}\n            >\n              <CloseIcon fontSize=\"inherit\" />\n            </IconButton>\n          }\n        >\n         Disclaimer: The COVID-19 data is collected from Nelson Mandela Bay Municipality website. I only update the data once there is an official report or statement. For any further infomation please visit https://www.nelsonmandelabay.gov.za/\n        </Alert>\n      </Collapse>\n      <Covid19 />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"bootstrap/dist/css/bootstrap.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}