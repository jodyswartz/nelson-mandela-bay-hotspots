{"version":3,"sources":["components/Loading.jsx","components/CovidMap.jsx","entities/LengendItem.js","entities/LegendItems.js","tasks/LoadCountriesTask.js","components/Legend.jsx","components/Covid19.jsx","App.js","serviceWorker.js","index.js"],"names":["Loading","style","height","display","justifyContent","alignItems","className","role","CovidMap","countries","Map","zoom","center","GeoJSON","fillColor","weight","color","fillOpacity","data","onEachFeature","country","layer","options","properties","name","confirmedText","bindTooltip","sticky","direction","on","mouseover","event","target","setStyle","mouseout","position","Paper","backgroundColor","fade","LegendItem","title","isFor","textColor","this","legendItems","cases","LoadCountryTask","covidUrl","setState","load","papa","parse","download","header","complete","result","covidCountries","i","features","covidCountry","find","ISO_A3","ISO3","confirmed","Number","Confirmed","length","legendItem","item","number","toString","replace","Legend","map","key","flex","fontWeight","fontSize","Covid19","useState","setCountries","legendItemsReverse","reverse","useEffect","console","log","LoadCountriesTask","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.182d4b69.chunk.js","sourcesContent":["import React from \"react\";\n\nconst Loading = () => {\n  return (\n    <div\n      style={{\n        height: \"100vh\",\n        display: \"flex\",\n        justifyContent: \"center\",\n        alignItems: \"center\",\n      }}\n    >\n      <div className=\"spinner-grow text-success\" role=\"status\">\n        <span className=\"sr-only\">Loading...</span>\n      </div>\n      <div className=\"spinner-grow text-danger\" role=\"status\">\n        <span className=\"sr-only\">Loading...</span>\n      </div>\n      <div className=\"spinner-grow text-info\" role=\"status\">\n        <span className=\"sr-only\">Loading...</span>\n      </div>\n    </div>\n  );\n};\n\nexport default Loading;\n","import React from \"react\";\nimport { Map, GeoJSON } from \"react-leaflet\";\nimport \"leaflet/dist/leaflet.css\";\nimport \"./CovidMap.css\";\nimport Control from 'react-leaflet-control';\nimport Paper from '@material-ui/core/Paper';\nimport { fade } from '@material-ui/core/styles/colorManipulator';\n\nconst CovidMap = ({ countries }) => {\n  const mapStyle = {\n    fillColor: \"white\",\n    weight: 1,\n    color: \"black\",\n    fillOpacity: 1,\n  };\n\n  const onEachCountry = (country, layer) => {\n    layer.options.fillColor = country.properties.color;\n    const name = country.properties.name;\n    const confirmedText = country.properties.confirmedText;\n    layer.bindTooltip( `<div>\n      <h4 className=\"white-monospace line-height-1 normal-font-weight no-wrap our-tooltip-title-text\">\n      ${name}\n      </h4>\n      <h3 className=\"white-monospace line-height-1 no-margin normal-font-weight\">\n          <b>${confirmedText}</b> \n      </h3>\n  </div> `,{\n      sticky: true,\n      direction: \"auto\"});\n  \n      layer.on({\n        mouseover: (event) => {\n                      event.target.setStyle({\n                      color: \"#f8f8ff\"\n                        });\n                                },\n        mouseout: (event) => {\n          event.target.setStyle({\n          color: \"#000000\",\n                });\n                  },\n      });\n\n  };\n\n  return (\n    <Map style={{ height: \"90vh\" }} zoom={10} center={[ -33.96,  25.62]}>\n      <GeoJSON\n        style={mapStyle}\n        data={countries}\n        onEachFeature={onEachCountry}\n      />\n       <Control position=\"topright\">\n         <Paper style={{padding: '20px'},{backgroundColor: fade('#484848', 0.5)}}>\n           <h2><font color=\"#f8f8ff\">Active Cases <b>2209</b> Updated: <b>10-12-2020</b></font></h2>        \n         </Paper>\n   </Control>\n   <Control position=\"bottomright\">\n       <Paper style={{padding: '20px'},{backgroundColor: fade('#484848', 0.5)}}>\n       <font color=\"#f8f8ff\"><h5>Active 10 December 2020</h5></font>  \n            <font color=\"#f8f8ff\">\n              <p><b>209</b><h6> Unknown Location</h6></p>\n              <p><b>169</b><h6> New Cases</h6></p>\n              <p><b>2061</b><h6> Passed Away</h6></p>\n              <p><b>44630</b><h6> Recovered</h6></p></font>\n         </Paper> \n          </Control>\n          <Control position=\"bottomleft\">\n       <Paper style={{padding: '10px'},{backgroundColor: fade('#484848', 0.5)}}>\n       <font color=\"#f8f8ff\">\n          <p><h6> Nelson Mandela Bay Covid-19 Hotspots</h6></p>\n        </font>\n        </Paper>\n        </Control>  \n    </Map>\n  );\n};\n\nexport default CovidMap;\n","class LegendItem {\n  constructor(title, color, isFor, textColor) {\n    this.title = title;\n    this.color = color;\n    this.isFor = isFor;\n    this.textColor = textColor != null ? textColor : textColor;\n  }\n}\n\nexport default LegendItem;\n","import LegendItem from \"./LengendItem\";\n\nvar legendItems = [\n  new LegendItem(\n    \"1,001 +\",\n    \"#741f1f\",\n    // \"#800026\",\n    (cases) => cases >= 1_001,\n    \"white\"\n  ),\n\n  new LegendItem(\n    \"501 - 1000\",\n    // \"#741f1f\",\n    \"#fd8d3c\",\n    (cases) => cases >= 501 && cases < 1_000,\n    \"White\"\n  ),\n\n  new LegendItem(\n    \"101 - 500\",\n    \"#feb24c\",\n    (cases) => cases >= 101 && cases < 500\n  ),\n\n  new LegendItem(\n    \"51 - 100\",\n    \"#fed976\",\n    (cases) => cases >= 51 && cases < 100\n  ),\n\n  new LegendItem(\n    \"1 - 50\",\n    \"#ffffcc\",\n    (cases) => cases > 1 && cases < 50\n  ),\n\n  new LegendItem(\"No Data\", \"#ffffff\", (cases) => true),\n];\n\nexport default legendItems;\n\n/**\n * 7 > 1 million                        #8b0000\n * 6 >= 500 thousand < 1 million        #9e2a2a\n * 5 >= 200 thousand < 500 thousand     #b15555\n * 4 >= 100 thousand  < 200 Thousand    #c57f7f\n * 3 > 50 thousand < 100 thousand       #d8aaaa\n * 2 >= 0 < 50 thousand                 #ebd4d4\n * 1 NO DATA                            #ffffff\n */\n\n/*\n\n#741f1f // Really red\n#9c2929 // more red\n#c57f7f // red\n#d8aaaa //more pink\n#ebd4d4 //pink\n#ffffff //white\n*/\n","import papa from \"papaparse\";\nimport legendItems from \"../entities/LegendItems\";\nimport { features } from \"../data/countries.json\";\n//    this.setState(features);\n\nclass LoadCountryTask {\n  covidUrl = \"https://raw.githubusercontent.com/jodyswartz/Testdata/main/cases_country.csv\";\n  \n  setState = null;\n\n  load = (setState) => {\n    this.setState = setState;\n\n    papa.parse(this.covidUrl, {\n      download: true,\n      header: true,\n      complete: (result) => this.#processCovidData(result.data),\n    });\n  };\n\n  #processCovidData = (covidCountries) => {\n    for (let i = 0; i < features.length; i++) {\n      const country = features[i];\n      //console.log(country);\n      const covidCountry = covidCountries.find(\n        (covidCountry) => country.properties.ISO_A3 === covidCountry.ISO3\n      );\n\n      country.properties.confirmed = 0;\n      country.properties.confirmedText = 0;\n\n      if (covidCountry != null) {\n        let confirmed = Number(covidCountry.Confirmed);\n        country.properties.confirmed = confirmed;\n        country.properties.confirmedText = this.#formatNumberWithCommas(\n          confirmed\n        );\n      }\n      this.#setCountryColor(country);\n    }\n\n    this.setState(features);\n  };\n\n  #setCountryColor = (country) => {\n    const legendItem = legendItems.find((item) =>\n      item.isFor(country.properties.confirmed)\n    );\n\n    if (legendItem != null) country.properties.color = legendItem.color;\n  };\n\n  #formatNumberWithCommas = (number) => {\n    return number.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\");\n  };\n}\n\nexport default LoadCountryTask;\n","import React from \"react\";\n\nconst Legend = ({ legendItems }) => {\n  return (\n    <div\n      style={{\n        display: \"flex\",\n        alignItems: \"stretch\",\n      }}\n    >\n      {legendItems.map((item) => (\n        <div\n          key={item.title}\n          style={{\n            backgroundColor: item.color,\n            flex: 1,\n            display: \"flex\",\n            alignItems: \"center\", // vertical\n            justifyContent: \"center\", // horiztontal\n            color: item.textColor != null ? item.textColor : \"black\",\n            fontWeight: \"bolder\",\n            fontSize: \"1em\",\n            height: \"10vh\",\n          }}\n        >\n          <span>{item.title}</span>\n        </div>\n      ))}\n    </div>\n  );\n};\n\nexport default Legend;\n","import React, { useState, useEffect } from \"react\";\n\nimport Loading from \"./Loading\";\nimport CovidMap from \"./CovidMap\";\nimport LoadCountriesTask from \"../tasks/LoadCountriesTask\";\nimport Legend from \"./Legend\";\nimport legendItems from \"../entities/LegendItems\";\n\nconst Covid19 = () => {\n  const [countries, setCountries] = useState([]);\n\n  const legendItemsReverse = [...legendItems].reverse();\n\n  const load = () => {\n    console.log(\"load\");\n    const loadCountriesTask = new LoadCountriesTask();\n    loadCountriesTask.load((countries) => setCountries(countries));\n  };\n\n  useEffect(load, []);\n\n  return (\n    <div>\n      {countries.length === 0 ? (\n        <Loading />\n      ) : (\n        <div>\n          <CovidMap countries={countries} />\n          <Legend legendItems={legendItemsReverse} />\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default Covid19;\n\n/*\nclass Covid19 extends Component {\n  state = {\n    countries: [],\n  };\n\n  loadCountryTask = new LoadCountryTask();\n\n  componentDidMount() {\n    this.loadCountryTask.load((countries) => this.setState({ countries }));\n  }\n\n  render() {\n    const { countries } = this.state;\n    return (\n      <div>\n        {countries.length === 0 ? (\n          <Loading />\n        ) : (\n          <div>\n            <CovidMap countries={countries} />\n            <Legend legendItems={legendItems} />\n          </div>\n        )}\n      </div>\n    );\n  }\n}\n\nexport default Covid19;\n*/\n","import React from \"react\";\nimport \"./App.css\";\nimport Covid19 from \"./components/Covid19\";\n\nfunction App() {\n  return (\n    <div>\n      <Covid19 />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"bootstrap/dist/css/bootstrap.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}